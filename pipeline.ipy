# Pipeline of quantification on de-novo transcriptome assembly.
# Usage: `ipython pipeline.ipy -- --method=all`

import os
import yaml
from pprint import pprint
import argparse
from scripts.utils import setupLogger

# Commmand line parameters
parser = argparse.ArgumentParser(description="Pipeline of quantification of de-novo assembly")
parser.add_argument("--method",       type=str, default="all",  help="What step you want to run. Default: all.")
parser.add_argument("-t", "--thread", type=int, default=32,     help="Threads")
parser.add_argument("-m", "--memory", type=int, default=300,    help="Memory")
parser.add_argument("--metadata",     type=str, default="metadata/meta.yaml", help="The path of metadata")
parser.add_argument("--base",         type=str, default="data", help="The path to store your data")
args = parser.parse_args()

# init
data = yaml.load(open(args.metadata), Loader=yaml.CLoader)
thread = args.thread
memory = args.memory
base_folder = args.base
%alias dk docker run -it --rm --security-opt label=disable -v $PWD:/app -w /app %s
logger = setupLogger()

def download():
    """
    Download data from ensembl and ncbi

    Output
    ------
    reference genome:       data/{species}/download/genome.fasta
    reference transcripts:  data/{species}/download/transcriptome.fasta
    reference annotation:   data/{species}/download/annotation.gff
    experiment fastq file:  data/{species}/xx.fastq
    """
    for species in data['species']:
        data_folder = f"{base_folder}/{species}"
        download_folder = f"{data_folder}/download"
        !mkdir -p {download_folder}

        # download sequences and annotation from Ensembl
        logger.info(f"Download {species} reference")
        reference = data['species'][species]
        !wget {reference['ref_genome']} -O {download_folder}/genome.fasta.gz
        !wget {reference['ref_transcriptome']} -O {download_folder}/transcriptome.fasta.gz
        !wget {reference['ref_annotation']} -O {download_folder}/annotation.gff.gz

        # unzip all
        !gzip -d {download_folder}/*.gz

        # download data for simulation dataset
        !echo '/LIBS/GUID = "7509f4a9-59b3-4305-85a3-e5a140183031"' > /tmp/tmp.mkfg
        for ds in data['datasets']:
            sraid = data['datasets'][ds][species].get('sraid', [])
            # Download fastq from ncbi
            for id in sraid:
                logger.info(f"Download sra {id} from ncbi")
                %dk -v /tmp/tmp.mkfg:/root/.ncbi/user-settings.mkfg:ro {data['images']['sratool']} \
                    fastq-dump --defline-seq '@$sn[_$rn]/$ri' --split-files {id} -O {download_folder}

            # merge the fastq
            if sraid:
                logger.info(f"Generate {species} {ds} reads data from sra")
                fastqs_r1 = ' '.join([os.path.join(download_folder, id + "_1.fastq") for id in sraid])
                fastqs_r2 = ' '.join([os.path.join(download_folder, id + "_2.fastq") for id in sraid])
                !cat {fastqs_r1} > {data_folder}/{ds}_r1.fastq
                !cat {fastqs_r2} > {data_folder}/{ds}_r2.fastq


def prepareReference():
    """
    Filter out short and mito mrna from gnome and transcriptome and
    Prepare data for simulation

    All files have prefix 'data/{species}/'

    Inputs
    ------
    The references data downloaded from web
        * download/genome.fasta
        * download/transcriptome.fasta
        * download/annotation.gff

    Outputs
    -------
    Filtered mrna transcriptome data
        * chromosome.fasta
        * mRNA.gtf
        * mRNA.fasta

    The files for simulation
        * simulation/chromosome/*.fasta
        * simulation/flux_simulator.gtf
        * simulation/flux_simulator_clean.gtf
    """

    from scripts.utils import mRNAFilter
    for species in data['species']:
        logger.info(f"Prepare {species} mRNA and simulation data")
        data_folder = f"{base_folder}/{species}"
        mRNAFilter(data_folder,
                   refdir=f"{data_folder}/download",
                   simdir=f"{data_folder}/simulation",
                   shortest_length=data['species'][species]['mrna_min_length'])

        # TODO: I don't know what it is
        awk_query = '\'BEGIN{FS="\t";OFS="\t"}{split($NF,a," ");pfx="";s="";for(i=1;i<=length(a);i+=2){if(a[i]=="transcript_id"){pfx=a[i]" "a[i+1]}else{s=s" "a[i]" "a[i+1]}}if(pfx==""){print "[WARN] line "NR" without transcript_id!" > "/dev/stderr"}else{$NF=pfx""s;print$0} }\''
        !awk {awk_query} {data_folder}/simulation/flux_simulator.gtf > {data_folder}/simulation/flux_simulator_clean.gtf


def simulation():
    """
    Simulate the reads sequencing from transcriptome.fasta

    All files have prefix 'data/{species}/'

    Inputs
    ------
    * simulation/chromosome/*.fasta
    * simulation/flux_simulator.gtf
    * simulation/flux_simulator_clean.gtf
    * metadata/flux_simulator_*.par
    * metadata/flux_simulator_*.pro

    Outputs
    -------
    Simulation output:  simulation/*
    Reads data:         xx_r1.fastq, xx_r2.fastq
    """
    from scripts.utils import splitInterleavedReads
    # for each species for each simulation datasets
    for species in data['species']:
        data_folder = f"{base_folder}/{species}"
        for ds in data['datasets']:
            if data['datasets'][ds]['type'] != "simulation":
                continue

            # copy the simulation profile
            simulation_folder = f"{base_folder}/{species}/simulation"
            file_simulation = data['datasets'][ds][species]['simulation_file']
            !cp {file_simulation}* {simulation_folder}
            name = os.path.basename(file_simulation)

            # simulation
            logger.info(f"Run simulation for {species} {ds}")
            %dk {data['images']['fluxsimulator']} \
                flux-simulator --threads {thread} -p {simulation_folder}/{name}.par -l -s

            # split reas
            splitInterleavedReads(f"{simulation_folder}/{name}.fastq", f"{data_folder}/{ds}")


def fastqc():
    """
    Fastqc(Inspect reads quality)

    Inputs
    ------
    Reads data: data/{species}/xx.fastq

    Outputs
    -------
    FastQC output: data/{species}/fastqc/
    """
    for species in data['species']:
        logger.info(f"Fastqc {species}")
        data_folder = f"{base_folder}/{species}"
        !mkdir -p {data_folder}/fastqc
        %dk {data['images']['fastqc']} \
            fastqc -t {thread} -f fastq -o {data_folder}/fastqc {data_folder}/*.fastq



def trimmomatic():
    """
    Trimmomatic(Remove low quality reads)

    Inputs
    ------
    Reads data: data/{species}/xx.fastq

    Outputs
    -------
    Trimmed reads data: data/{species}/xx.trim.fastq
    Trimmomatic output: data/{species}/trimmed/
    """
    # for each species for each datasets
    for species in data['species']:
        data_folder = f"{base_folder}/{species}"
        trim_folder = f"{data_folder}/trimmed"
        !mkdir -p {trim_folder}
        for ds in data['datasets']:
            # Run trimmomatic
            logger.info(f"Trimmomatic {species} {ds}")
            %dk {data['images']['trimmomatic']} \
                trimmomatic PE -threads {thread} -phred33 -trimlog {trim_folder}/{ds}.log \
                {data_folder}/{ds}_r1.fastq      {data_folder}/{ds}_r2.fastq \
                {data_folder}/{ds}_r1.trim.fastq {trim_folder}/{ds}_r1.unpaired.fastq \
                {data_folder}/{ds}_r2.trim.fastq {trim_folder}/{ds}_r2.unpaired.fastq \
                {data['trimmomatic']}


def assemble():
    """
    Assemble reads to transcriptome
    Three methods are used:
        trinity, rnaspades, transabyss

    Inputs
    ------
    Reads data: data/{species}/xx_r{1,2}.trim.fastq

    Outputs
    -------
    Assembled sequences: data/{species}/xx.{assemble_method}.fasta
    """
    from scripts.utils import fasta_length_filter

    # for each species for each datasets for each assemble method
    for species in data['species']:
        data_folder = f"{base_folder}/{species}"
        for ds in data['datasets']:
            for method_assemble in data['assemble']:
                # TODO check: Using different strand when proceed mouse data with experiment fastq
                if ds.startswith("exp") and species == "mouse":
                    strand_trinity = "--SS_lib_type RF"
                    strand_transabyss = "--SS"
                    strand_rnaspades = "--ss-rf"
                else:
                    strand_trinity = ""
                    strand_transabyss = ""
                    strand_rnaspades = ""

                image = data['images'][method_assemble]
                min_len = data['assemble'][method_assemble]['minlen']
                ori_seq = lambda o: f"{data_folder}/{ds}_r{{}}.trim.fastq".format(o)
                assemble_folder = f"{data_folder}/{method_assemble}"
                !mkdir -p {assemble_folder}

                # trinity
                logger.info(f"Assemble {ori_seq('*')} by {method_assemble}")
                if method_assemble == "trinity":
                    %dk {image} \
                        Trinity --max_memory {memory}G --CPU {thread} --min_contig_length {min_len} \
                        --seqType fq {strand_trinity} --output {assemble_folder} \
                        --left {ori_seq(1)} --right {ori_seq(2)}
                    !cp {assemble_folder}/Trinity.fasta {data_folder}/{ds}.trinity.fasta
                    !rm -rf {assemble_folder}

                # rnaspades
                elif method_assemble == "rnaspades":
                    %dk -u root {image} \
                        rnaspades.py -t {thread} -m {memory} {strand_rnaspades} \
                        -1 {ori_seq(1)} -2 {ori_seq(2)} -o {assemble_folder}
                    fasta_length_filter(f"{assemble_folder}/transcripts.fasta",
                                        f"{data_folder}/{ds}.rnaspades.fasta", min_len)
                    !rm -rf {assemble_folder}

                # transabyss
                elif method_assemble == "transabyss":
                    %dk {image} bash -c " \
                            ln -s /usr/local/bin/ /usr/local/lib/python3.8/site-packages/bin && \
                            transabyss --threads {thread} --length {min_len} {strand_transabyss} \
                            --pe {ori_seq(1)} {ori_seq(2)} --outdir {assemble_folder}"

                    !cp {assemble_folder}/transabyss-final.fa {data_folder}/{ds}.transabyss.fasta
                    !rm -rf {assemble_folder}

                else:
                    raise ValueError(f"Unknown assemble tool {method_assemble}")

            # create soft link to mRNA sequences
            !ln -s mRNA.fasta {data_folder}/{ds}.mRNA.fasta


def quantification(reference=True):
    """
    Transcriptome Quantification

    Parameters
    ----------
    reference: bool, default = True
        Run quantification on mRNA(reference).

    Inputs
    ------
    Assembled sequences: data/{species}/xx.{method_assemble}.fasta
    Reads: data/{species}/xx_r{1,2}.fastq

    Outputs
    -------
    Abundance tsv: data/{species}/xx.{method_assemble}.{method_quantify}.tsv
    """
    # for each species for each datasets for each assemble method for each quantification
    for species in data['species']:
        data_folder = f"{base_folder}/{species}"
        for ds in data['datasets']:
            for method_assemble in [*data['assemble'], "mRNA"]:
                if method_assemble == "mRNA" and not reference:
                    continue
                for method_quantify in data['quantify']:
                    # TODO check: Using different strand when proceed mouse data with experiment fastq
                    if ds.startswith("exp") and species == "mouse":
                        strand_kallisto = "--rf-stranded"
                        strand_rsem = "reverse"
                        #SS_SALMON="-l ISR"
                    else:
                        strand_kallisto = ""
                        strand_rsem = "none"

                    image = data['images'][method_quantify]
                    ori_seq = lambda o: f"{data_folder}/{ds}_r{{}}.fastq".format(o)
                    whole_seq = f"{data_folder}/{ds}.{method_assemble}.fasta"
                    name = f"{ds}.{method_assemble}.{method_quantify}"
                    quantify_folder = f"{data_folder}/{method_quantify}"
                    !mkdir -p {quantify_folder}
                    logger.info(f"Quantify {species} {name} by {method_quantify}")

                    # kallisto
                    if method_quantify == "kallisto":
                        %dk {image} \
                            kallisto index -i {quantify_folder}/{name}.index -k {data['quantify'][method_quantify]['kmer']} {whole_seq}
                        %dk {image} \
                            kallisto quant -i {quantify_folder}/{name}.index -t {thread} {strand_kallisto} \
                                 -o {quantify_folder} {ori_seq(1)} {ori_seq(2)}
                        !mv {quantify_folder}/abundance.tsv {data_folder}/{name}.tsv

                    # rsem
                    elif method_quantify == "rsem":
                        %dk {image} \
                            rsem-prepare-reference -p {thread} --bowtie2 {whole_seq} {quantify_folder}/{name}.index
                        %dk {image} \
                            rsem-calculate-expression --strandedness {strand_rsem} -p {thread} --bowtie2 --time --paired-end  \
                                {ori_seq(1)} {ori_seq(2)} {quantify_folder}/{name}.index {quantify_folder}/{name}
                        !mv {quantify_folder}/{name}.isoforms.results {data_folder}/{name}.tsv

                    # salmon
                    elif method_quantify == "salmon":
                        %dk {image} \
                            salmon index -i {quantify_folder}/{name}.index -t {whole_seq} --type quasi \
                                -k {data['quantify'][method_quantify]['kmer']}
                        %dk {image} \
                            salmon quant -i {quantify_folder}/{name}.index -p {thread} -l A \
                                -1 {ori_seq(1)} -2 {ori_seq(2)} -o {quantify_folder}
                        !mv {quantify_folder}/quant.sf {data_folder}/{name}.tsv


def answerExp():
    """
    Generate answer to experiments fastq.

    Averaging tpm from three quantification methods
    (All mapped to mRNA) are set as answer.

    Inputs
    ------
    Quantification tsv files: data/{species}/xx.mRNA.{method_quantify}.tsv

    Outputs
    -------
    Answer tsv files: data/{species}/xx.mRNA.answer.tsv
    """
    from scripts.utils import average_tpm
    # for each experiment
    for species in data['species']:
        data_folder = f"{base_folder}/{species}"
        for ds in data['datasets']:
            if data['datasets'][ds]['type'] != "experiment":
                continue
            # average the abundance data
            logger.info(f"Create answer for {species} {ds} by {list(data['quantify'].keys())}")
            files = {method_quantify: f"{data_folder}/{ds}.mRNA.{method_quantify}.tsv"
                        for method_quantify in data['quantify']}
            average_tpm(files, f"{data_folder}/{ds}.mRNA.answer.tsv")


def answerSim():
    """
    Generate answer to simulation fastq.

    The answer of count/TPM = the count of simulation - count of trimmed

    Inputs
    ------
    Quantification tsv files: data/{species}/xx.mRNA.{method_quantify}.tsv
    Simulation data: data/{species}/simulation/xx.pro
    Simulation data: data/{species}/simulation/xx.lib
    unparied reads: data/{species}/trimmed/simlow_r1.unpaired.fastq

    Outputs
    -------
    Answer tsv files: data/{species}/xx.mRNA.answer.tsv
    """
    from scripts.utils import reference_tpm

    # for each simulation
    for species in data['species']:
        data_folder = f"{base_folder}/{species}"
        for ds in data['datasets']:
            if data['datasets'][ds]['type'] != "simulation":
                continue
            # calculate abundance
            name = os.path.basename(data['datasets'][ds][species]['simulation_file'])
            logger.info(f"Create answer for {species} {name} by {name}")
            reference_tpm(f"{data_folder}/simulation/{name}.pro",
                          f"{data_folder}/simulation/{name}.lib",
                          [f"{data_folder}/trimmed/{ds}_r1.unpaired.fastq",
                           f"{data_folder}/trimmed/{ds}_r2.unpaired.fastq"],
                          f"{data_folder}/{ds}.mRNA.answer.tsv")


def blastTranscript():
    """
    Run blast on transcriptome

    Three different query are ran:
        * Blast to itself
        * Blast assembled_transcripts to reference
        * Blast reference to assembled_transcripts

    Input
    -----
    Assembled sequences: data/{species}/xx.{method_assemble}.fasta
    mRNA : data/{species}/mRNA.fasta

    Output:
    Blast data: data/{species}/blast
    Blast self result: data/{species}/mRNA.blast.self.tsv
    Blast self result: data/{species}/{ds}.{method_assemble}.blast.self.tsv
    Blast mrna to contig result: data/{species}/{ds}.{method_assemble}.blast.mrna_to_contig.tsv
    Blast contig to mrna result: data/{species}/{ds}.{method_assemble}.blast.contig_to_mrna.tsv
    """
    # for each species for each datasets for each assemble method
    for species in data['species']:
        data_folder = f"{base_folder}/{species}"
        !mkdir -p {data_folder}/blast

        # mRNA database and self blast
        mrna_seq = f"{data_folder}/mRNA.fasta"
        mrna_blast = f"{data_folder}/blast/mRNA"
        logger.info(f"Blast {mrna_seq}")
        %dk {data['images']['blast']} \
            makeblastdb -in {mrna_seq} -dbtype nucl -out {mrna_blast}
        %dk {data['images']['blast']} \
            blastn -db {mrna_blast} -query {mrna_seq} -outfmt 6 -out {data_folder}/mRNA.blast.self.tsv \
            -evalue {data['blast']['evalue']} -perc_identity {data['blast']['identity']}
        # create soft link
        for ds in data['datasets']:
            !ln -s mRNA.blast.self.tsv {data_folder}/{ds}.mRNA.blast.self.tsv

        for ds in data['datasets']:
            for method_assemble in data['assemble']:
                contig_seq = f"{data_folder}/{ds}.{method_assemble}.fasta"
                blast_name = f"{data_folder}/{ds}.{method_assemble}.blast"
                contig_blast = f"{data_folder}/blast/{ds}.{method_assemble}"

                # contig database and self blast
                logger.info(f"Blast {contig_seq}")
                %dk {data['images']['blast']} \
                    makeblastdb -in {contig_seq} -dbtype nucl -out {contig_blast}
                %dk {data['images']['blast']} \
                    blastn -db {contig_blast} -query {contig_seq} -outfmt 6 -out {blast_name}.self.tsv \
                    -evalue {data['blast']['evalue']} -perc_identity {data['blast']['identity']}

                # blast mrna to contig
                logger.info(f"Blast {contig_seq} and {mrna_seq}")
                %dk {data['images']['blast']} \
                    blastn -db {contig_blast} -query {mrna_seq}   -outfmt 6 -out {blast_name}.mrna_to_contig.tsv
                # blast contig to mrna
                %dk {data['images']['blast']} \
                    blastn -db {mrna_blast}   -query {contig_seq} -outfmt 6 -out {blast_name}.contig_to_mrna.tsv


def checkAssembleQuality():
    """
    Check assembled transcriptome quality by Transrate

    Inputs
    ------
    Assembled sequences: data/{species}/xx.{method_assemble}.fasta

    Outputs
    -------
    Transrate output: data/{species}/transrate
    Transrate tsv: data/{species}/xx.{method_assemble}.transrate.tsv
    """
    # for each species for each datasets for each assemble method
    for species in data['species']:
        data_folder = f"{base_folder}/{species}"
        for ds in data['datasets']:
            for method_assemble in [*data['assemble'], "mRNA"]:
                transrate_folder = f"{data_folder}/transrate"
                !mkdir -p {transrate_folder}
                name = f"{ds}.{method_assemble}"

                # run transrate
                logger.info(f"Transrate {species} {name}")
                %dk {data['images']['transrate']} \
                    transrate --assembly {data_folder}/{name}.fasta --threads {thread} \
                    --output {transrate_folder}/{name} \
                    --left {data_folder}/{ds}_r1.fastq --right {data_folder}/{ds}_r2.fastq
                !mv {transrate_folder}/{name}/{name}/contigs.csv \
                    {data_folder}/{name}.transrate.csv


def Quanteval():
    """
    Run QuantEval finally

    Inputs
    ------
    Abundace data: data/{species}/xx.{method_assemble}.{method_quantify}.tsv
    Abundace answer data: data/{species}/xx.mRNA.anser.tsv

    Outputs
    -------
    Reference: data/{species}/quanteval/xx.{method_assemble}.ref.tsv
    Contig: data/{species}/quanteval/xx.{method_assemble}.contig.tsv
    Matched: data/{species}/quanteval/xx.{method_assemble}.match.tsv
    """
    from scripts.utils import merge_tpm
    # for each species for each datasets for each assemble method
    for species in data['species']:
        data_folder = f"{base_folder}/{species}"
        for ds in data['datasets']:
            for method_assemble in ["mRNA", *data['assemble']]:
                quanteval_folder = f"{data_folder}/quanteval"
                !mkdir -p {quanteval_folder}
                name = f"{ds}.{method_assemble}"
                file_abundance= f"{quanteval_folder}/{name}.merged.csv"
                file_transrate = f"{data_folder}/{name}.transrate.csv"
                file_blast_self = f"{data_folder}/{name}.blast.self.tsv"
                file_ref_output = f"{quanteval_folder}/{ds}.mRNA.ref.tsv"
                file_contig_output = f"{quanteval_folder}/{name}.contig.tsv"

                # collect all abundance data
                logger.info(f"Merge Abundance {name}")
                files = {method_quantify: f"{data_folder}/{name}.{method_quantify}.tsv"
                            for method_quantify in data['quantify']}

                # rename mRNA to answer
                if method_assemble == "mRNA":
                    files['answer'] = f"{data_folder}/{name}.answer.tsv"

                # merge it
                merge_tpm(files, file_abundance)

                # main
                logger.info(f"QuantEval cluster {name}")
                if method_assemble == "mRNA":
                    !python3 QuantEval.py reference \
                        --abundance {file_abundance} \
                        --transrate {file_transrate} \
                        --blast     {file_blast_self} \
                        --gtf       {data_folder}/mRNA.gtf \
                        --output    {file_ref_output}
                else:
                    !python3 QuantEval.py contig \
                        --abundance {file_abundance} \
                        --transrate {file_transrate} \
                        --blast     {file_blast_self} \
                        --output    {file_contig_output}

                    !python3 QuantEval.py match \
                        --reference {file_ref_output} \
                        --contig    {file_contig_output} \
                        --blast     {data_folder}/{name}.blast.contig_to_mrna.tsv \
                        --output    {quanteval_folder}/{name}.match.csv


# main
if args.method in ["all", "download"]:
    download()
if args.method in ["all", "simulation"]:
    prepareReference()
    simulation()
if args.method in ["all", "fastqc"]:
    fastqc()
if args.method in ["all", "trim"]:
    trimmomatic()
if args.method in ["all", "assemble"]:
    assemble()
if args.method in ["all", "quantify"]:
    quantification(reference=True)
if args.method in ["all", "answer"]:
    answerExp()
    answerSim()
if args.method in ["all", "postassemble"]:
    blastTranscript()
    checkAssembleQuality()
if args.method in ["all", "quanteval"]:
    Quanteval()
